generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  MENTOR
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(STUDENT)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-One
  store          Store?          @relation("UserStore")
  studentProfile StudentProfile?
  wallet         Wallet?
  mentorProfile  Mentor?

  // One-to-Many
  reviews        Review[]
  mentorRequests MentorRequest[] @relation("StudentRequests")
  orders         Order[]
}

model StudentProfile {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique
  verified Boolean @default(false)
}

model Store {
  id          String    @id @default(cuid())
  name        String
  description String
  owner       User      @relation("UserStore", fields: [ownerId], references: [id])
  ownerId     String    @unique
  products    Product[]
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  ecoFriendly Boolean @default(false)

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  status     String
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Wallet {
  id      String        @id @default(cuid())
  balance Float         @default(0)
  user    User          @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime      @updatedAt
  userId  String        @unique
  history Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  type        String
  amount      Float
  description String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  walletId    String
  createdAt   DateTime @default(now())
}

model Mentor {
  id           String          @id @default(cuid())
  user         User            @relation(fields: [userId], references: [id])
  userId       String          @unique
  title        String
  bio          String
  rating       Float           @default(0)
  tags         String[]
  image        String?
  availability String
  reviews      Review[]
  requests     MentorRequest[]
}

model MentorRequest {
  id        String   @id @default(cuid())
  student   User     @relation("StudentRequests", fields: [studentId], references: [id])
  studentId String
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentorId  String
  status    String   @default("pending")
  message   String?
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  mentor    Mentor?  @relation(fields: [mentorId], references: [id])
  mentorId  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
